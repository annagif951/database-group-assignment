-- database bookstores
CREATE DATABASE BOOKSTORES;
USE Bookstores;

-- book language table
CREATE TABLE book_language (
    language_id INT PRIMARY KEY AUTO_INCREMENT,
    language_code VARCHAR(8) NOT NULL,
    language_name VARCHAR(50) NOT NULL
);

-- publisher table
CREATE TABLE publisher (
    publisher_id INT PRIMARY KEY AUTO_INCREMENT,
    publisher_NAME VARCHAR(100) NOT NULL,
    publisher_website VARCHAR(255) NOT NULL
);

-- author table
CREATE TABLE author (
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    author_name VARCHAR(80) NOT NULL,
    author_bio TEXT,
    birth_date date
);

-- book table
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    book_title VARCHAR(255) NOT NULL,
    isbn VARCHAR(20) UNIQUE NOT NULL,
    publisher_id INT,
    language_id INT,
    num_pages INT,
    publication_date DATE,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL DEFAULT 0,
    FOREIGN KEY (publisher_id) REFERENCES publisher(publisher_id),
    FOREIGN KEY (language_id) REFERENCES book_language(language_id)
);

-- table book author
CREATE TABLE book_author(
    book_id INT NOT NULL,
    author_id INT NOT NULL,
    PRIMARY KEY (book_id,author_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id),
    FOREIGN KEY (author_id) REFERENCES author(author_id)
);

-- table country
CREATE TABLE country (
    country_id INT PRIMARY KEY AUTO_INCREMENT,
    country_name VARCHAR(100) NOT NULL,
    country_code VARCHAR(3) NOT NULL
);

-- table address status
CREATE TABLE address_status (
    status_id INT PRIMARY KEY AUTO_INCREMENT,
    status_name VARCHAR(50) NOT NULL
);

-- table address
CREATE TABLE address (
    address_id INT PRIMARY KEY AUTO_INCREMENT,
    street_number VARCHAR(10) NOT NULL,
    street_name VARCHAR(100) NOT NULL,
    city VARCHAR(50) NOT NULL,
    country_id INT NOT NULL,
    postal_code VARCHAR(20) NOT NULL,
    FOREIGN KEY (country_id) REFERENCES country(country_id)
);

-- customer table
CREATE TABLE customer (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Create the Customer_Address Table
CREATE TABLE customer_address (
    address_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    address_line_1 VARCHAR(255) NOT NULL,
    address_line_2 VARCHAR(255),
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100),
    country_id INT,
    status_id INT,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (country_id) REFERENCES country(country_id),
    FOREIGN KEY (status_id) REFERENCES address_status(status_id)
);

-- order status table
CREATE TABLE order_status (
    status_id INT PRIMARY KEY AUTO_INCREMENT,
    status_description VARCHAR(50) NOT NULL
);

-- order table
CREATE TABLE cust_order (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date DATETIME NOT NULL,
    status_id INT,
    FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
    FOREIGN KEY (status_id) REFERENCES order_status(status_id)
);

-- order item table
CREATE TABLE order_item (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    book_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
    FOREIGN KEY (book_id) REFERENCES book(book_id)
);

-- Create the Shipping_Method Table
CREATE TABLE shipping_method (
    shipping_id INT PRIMARY KEY AUTO_INCREMENT,
    method_name VARCHAR(50) NOT NULL
);

-- Create the Order_History Table
CREATE TABLE order_history (
    history_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    status_id INT,
    timestamp DATETIME NOT NULL,
    FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
    FOREIGN KEY (status_id) REFERENCES order_status(status_id)
);

-- Create the Payment_Method Table
CREATE TABLE payment_method (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    method_name VARCHAR(50) NOT NULL
);

-- Create the Payment Table
CREATE TABLE payment (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    payment_date DATETIME NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_method_id INT,
    FOREIGN KEY (order_id) REFERENCES cust_order(order_id),
    FOREIGN KEY (payment_method_id) REFERENCES payment_method(payment_id)
);

-- Insert book languages
INSERT INTO book_language (language_code, language_name) VALUES 
('en', 'English'),
('es', 'Spanish'),
('fr', 'French'),
('de', 'German'),
('ja', 'Japanese');

-- Insert publishers
INSERT INTO publisher (publisher_NAME, publisher_website) VALUES 
('Penguin Random House', 'www.penguinrandomhouse.com'),
('HarperCollins', 'www.harpercollins.com'),
('Simon & Schuster', 'www.simonandschuster.com'),
('Macmillan', 'www.macmillan.com'),
('Hachette', 'www.hachette.com');

-- Insert address statuses
INSERT INTO address_status (status_name) VALUES 
('Current'),
('Previous'),
('Billing'),
('Shipping');

-- Insert countries
INSERT INTO country (country_name, country_code) VALUES 
('United States', 'US'),
('United Kingdom', 'UK'),
('Canada', 'CA'),
('Australia', 'AU'),
('Germany', 'DE');

-- Insert order statuses
INSERT INTO order_status (status_description) VALUES 
('Pending'),
('Processing'),
('Shipped'),
('Delivered'),
('Cancelled'),
('Returned');

-- Insert shipping methods
INSERT INTO shipping_method (method_name) VALUES 
('Standard Shipping'),
('Express Shipping'),
('Overnight Shipping'),
('International Shipping');

-- Insert payment methods
INSERT INTO payment_method (method_name) VALUES 
('Credit Card'),
('Debit Card'),
('PayPal'),
('Bank Transfer'),
('Cash on Delivery');

-- Create admin user with full privileges
CREATE USER 'bookstore_admin'@'localhost' IDENTIFIED BY '123456789';
GRANT ALL PRIVILEGES ON bookstores.* TO 'bookstore_admin'@'localhost';

-- Create manager user with read/write access
CREATE USER 'bookstore_manager'@'localhost' IDENTIFIED BY 'ManagerPass456!';
GRANT SELECT, INSERT, UPDATE, DELETE ON bookstores.* TO 'bookstore_manager'@'localhost';

-- Create staff user with limited access
CREATE USER 'bookstore_staff'@'localhost' IDENTIFIED BY 'StaffPwd789!';
GRANT SELECT ON bookstores.* TO 'bookstore_staff'@'localhost';
GRANT INSERT, UPDATE ON bookstores.cust_order, bookstores.order_item, bookstores.order_history TO 'bookstore_staff'@'localhost';

-- Create customer service user
CREATE USER 'bookstore_service'@'localhost' IDENTIFIED BY 'ServicePass321!';
GRANT SELECT ON bookstores.* TO 'bookstore_service'@'localhost';
GRANT UPDATE ON bookstores.customer, bookstores.customer_address TO 'bookstore_service'@'localhost';

FLUSH PRIVILEGES;